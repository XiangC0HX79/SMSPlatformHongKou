<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   borderVisible="true" borderStyle="solid"
			  xmlns:s="library://ns.adobe.com/flex/spark"
			  xmlns:mx="library://ns.adobe.com/flex/mx" height="100%">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import app.model.vo.ContactVO;
			import app.model.vo.GroupVO;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			
			[Bindable]
			[Embed(source="assets/image/LeftPanel/我的同事.png")]
			public var iconSelected:Class;
			
			[Bindable]
			[Embed(source="assets/image/LeftPanel/我的客户.png")]
			public var iconNoSelected:Class;
			
			private var dictContact:Dictionary;
						
			[Bindable]private var listXML:XML;
			[Bindable]private var selectCount:Number = 0;
			
			[Bindable]private var listSelected:ArrayCollection = new ArrayCollection;
			
			public function get mobs():String
			{
				var s:String = "";
				
				for each(var contact:ContactVO in dictContact)
				{
					if((contact.selected) && (contact.phone != ""))
						s += contact.phone + ";";
				}
				
				var arr:Array = editPhone.text.split(/[^\d]+/);				
				for each(var phone:String in arr)
				{
					if(phone != "")
					{
						s += phone + ";";
					}
				}
				
				return s;
			}
			
			public function get names():String
			{
				var s:String = "";
				
				for each(var contact:ContactVO in dictContact)
				{
					if(contact.selected)
						s += contact.name + ";";
				}
				
				return s;
			}
			
			public function get mails():String
			{
				var s:String = "";
				
				for each(var contact:ContactVO in dictContact)
				{
					if(contact.selected) 
					{
						if(contact.mail != "")
							s += contact.mail + ",";
					}
				}
				
				return s;
			}
			
			public function setListContact(listGroup:ArrayCollection,listContact:ArrayCollection,draftPhones:String):void
			{		
				editPhone.text = "";
				
				this.dictContact = new Dictionary;
				for each(var contact:ContactVO in listContact)
				{
					var newC:ContactVO = new ContactVO;
					newC.copy(contact);
						
					if((newC.phone != "") && (draftPhones.indexOf(newC.phone) != -1))
						newC.selected = true;
					
					this.dictContact[contact.id] = newC;					
				}
				
				var xml:XML = <node label="所有会员" type="root" selected = "false"/>;
				for each(var group:GroupVO in listGroup)
				{
					var newXML:XML = <node/>;
					newXML.@id = group.id;
					newXML.@selected = "false";
					newXML.@type = "group";
					newXML.@label = group.label;
					xml.appendChild(newXML);
				}
				
				for each(contact in listContact)
				{
					if(contact.group == "")
					{
						newXML = <node/>;
						newXML.@id = contact.id;
						newXML.@selected = "false";
						newXML.@type = "contact";
						newXML.@phone = contact.phone;
						newXML.@mail = contact.mail;
						newXML.@label = contact.name;
						xml.insertChildAfter(null,newXML);	
						//xml.appendChild(newXML);	
					}
				}
				
				for each(var item:XML in xml.children()) 
				{
					if(item.@type == "group")
					{
						for each(contact in listContact)
						{
							if(contact.group.indexOf(item.@label) != -1)
							{
								newXML = <node/>;
								newXML.@id = contact.id;
								newXML.@selected = "false";
								newXML.@type = "contact";
								newXML.@phone = contact.phone;
								newXML.@mail = contact.mail;
								newXML.@label = contact.name;
								
								item.appendChild(newXML);	
							}
						}
					}
				}
								
				listXML = xml;
				
				updateTree();
				
				treeContact.expandItem(listXML,true);
			}
						
			protected function itemClickHandler(event:ListEvent):void
			{
				var item:XML = XML(event.itemRenderer.data);
				
				//var value:String = (item.@selected == "true")?"false":"true";
								
				if(item.@type == "root")
				{
					for each(var contact:ContactVO in dictContact)
					{
						contact.selected = (item.@selected != "true");
					}
				}
				else if(item.@type == "group")
				{
					for each(var contactXML:XML in item.children())
					{
						(this.dictContact[String(contactXML.@id)] as ContactVO).selected = (item.@selected != "true");
					}
				}
				else
				{
					(this.dictContact[String(item.@id)] as ContactVO).selected = (item.@selected != "true");
				}
				
				updateTree(); 
			}
			
			private function iconFun(item:Object):*  
			{  
				var xml:XML= XML(item);  
				if(xml.@selected == "true")
					return iconSelected;  
				else 
					return iconNoSelected;  
			}    
						
			private function updateTree():void
			{
				this.selectCount = 0;
				
				for each(var c:ContactVO in dictContact)
				{
					if(c.selected)this.selectCount++;
				}
								
				var rootSelected:Boolean = true;
				
				for each(var group:XML in listXML.children())
				{		
					var groupSelected:Boolean = true;
					
					if(group.@type == "group")
					{
						for each(var contact:XML in group.children())
						{
							var b:Boolean = (this.dictContact[String(contact.@id)] as ContactVO).selected;
							contact.@selected = b?"true":"false";
							groupSelected = (b && groupSelected);
						}
					}
					else
					{
						groupSelected = (this.dictContact[String(group.@id)] as ContactVO).selected;
					}
					
					group.@selected = groupSelected?"true":"false";
					
					rootSelected = (rootSelected && groupSelected);
				}
				
				listXML.@selected = rootSelected?"true":"false";
				
				treeContact.validateNow(); 
			}
						
			private function selectOKButtonDownHandler(event:FlexEvent):void
			{				
				for each(var contact:ContactVO in dictContact)
				{
					contact.selected = true;
				}
				
				updateTree();
			}
			
			protected function selectCancelButtonDownHandler(event:FlexEvent):void
			{
				for each(var contact:ContactVO in dictContact)
				{
					contact.selected = !contact.selected;
				}
				
				updateTree();
			}
			
			protected function selectNone(event:FlexEvent):void
			{
				for each(var contact:ContactVO in dictContact)
				{
					contact.selected = false;
				}
				
				updateTree();
			}
		]]>
	</fx:Script>
	<s:layout>
		<s:HorizontalLayout paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2"/>
	</s:layout>
	
	<s:VGroup height="100%">
		<s:Label text="选择会员：当前已选择{selectCount}人"/>			
		
		<mx:Tree id="treeContact" width="300" height="100%" borderVisible="false"
				 itemClick="itemClickHandler(event)" dataProvider="{listXML}"
				 iconFunction="iconFun"
				 labelField="@label">
		</mx:Tree>
		
		<s:HGroup width="100%" horizontalAlign="center">
			<s:Button label="全部选择" buttonDown="selectOKButtonDownHandler(event)"
					  skinClass="app.view.components.skin.skinButton"/>	
			<s:Button label="反向选择" buttonDown="selectCancelButtonDownHandler(event)"
					  skinClass="app.view.components.skin.skinButton"/>		
			<s:Button label="取消选择" buttonDown="selectNone(event)"
					  skinClass="app.view.components.skin.skinButton"/>						
		</s:HGroup>
		
		<s:Label text="临时号码：（以逗号分隔电话号码）"/>	
		<s:TextArea width="100%" height="100" id="editPhone"/>		
	</s:VGroup>
	
	<!--<s:VGroup height="100%">		
		<s:Label text="已选择会员列表：{selectCount}人"/>		
		<s:List width="100" dataProvider="{listSelected}">
			
		</s:List>
	</s:VGroup>-->
</s:BorderContainer>
